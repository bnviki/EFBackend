var app = angular.module('mainMod', ['OCServices']).
  config(['$routeProvider', '$locationProvider', '$httpProvider', function($routeProvider, $locationProvider, $httpProvider) {
	  $routeProvider.      
	      when('/login', {templateUrl: 'partial/login',   controller: SignInCtrl}).
	      when('/main', {templateUrl: 'partial/main',   controller: MainCtrl, reloadOnSearch: false}). 	      
	      when('/profile', {templateUrl: 'partial/profile',   controller: ProfileCtrl, reloadOnSearch: false}). 	      
	      when('/', {redirectTo: '/main'});      
	      //otherwise({redirectTo: '/main'});
	  $locationProvider.html5Mode(true);
          
	  var interceptor = ['$rootScope','$q', function(scope, $q) { 
	    function success(response) {
	      return response;
	    }
	 
	    function error(response) {
	      var status = response.status;
	 
	      if (status == 401) {
		var deferred = $q.defer();
		var req = {
		  config: response.config,
		  deferred: deferred
		}
		scope.requests401.push(req);
		scope.$broadcast('event:loginRequired');
		return deferred.promise;
	      }
	      // otherwise
	      return $q.reject(response);
	 
	    }
	 
	    return function(promise) {
	      return promise.then(success, error);
	    }
	 
	  }];
	  $httpProvider.responseInterceptors.push(interceptor);
}]);

app.run(['$rootScope', '$http', '$location', function(scope, $http, $location) {
 
  /**
   * Holds all the requests which failed due to 401 response.
   */
  scope.requests401 = [];
 
  /**
   * On 'event:loginConfirmed', resend all the 401 requests.
   */
  scope.$on('event:loginConfirmed', function() {
    var i, requests = scope.requests401;
    for (i = 0; i < requests.length; i++) {
      retry(requests[i]);
    }
    scope.requests401 = [];
 
    function retry(req) {
      $http(req.config).then(function(response) {
        req.deferred.resolve(response);
        //scope.$digest();  
      });
    }
  });
 
  /**
   * On 'event:loginRequest' send credentials to the server.
   */
  /*scope.$on('event:loginRequest', function(event, username, password) {
    var payload = $.param({j_username: username, j_password: password});
    var config = {
      headers: {'Content-Type':'application/x-www-form-urlencoded; charset=UTF-8'}
    }
    $http.post('j_spring_security_check', payload, config).success(function(data) {
      if (data === 'AUTHENTICATION_SUCCESS') {
        scope.$broadcast('event:loginConfirmed');
      }
    });
  });*/
 
  /**
   * On 'logoutRequest' invoke logout on the server and broadcast 'event:loginRequired'.
   */
  scope.$on('event:logoutRequest', function() {
    $http.put('j_spring_security_logout', {}).success(function() {
      ping();
    });
  });

  scope.$on('event:loginRequired', function() {
    $location.path('/login');    
  });
 
  /**
   * Ping server to figure out if user is already logged in.
   */
  /*function ping() {
    $http.get('rest/ping').success(function() {
      scope.$broadcast('event:loginConfirmed');
    });
  }
  ping();*/

// currently ongoing chats

  scope.currentChats = [];
  Candy.init('http-bind/', {
	core: { debug: false },
	view: { resources: 'js/candy/res/' }
  });

  Candy.Core.connect('vikram', null, 'tukki');

 
}]);
